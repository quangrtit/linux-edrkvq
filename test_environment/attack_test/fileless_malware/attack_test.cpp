#include <sys/mman.h>
#include <sys/syscall.h>
#include <unistd.h>
#include <fcntl.h>
#include <stdlib.h>
#include <string.h>
#include <stdio.h>
#include <errno.h>

#ifndef MFD_ALLOW_SEALING
#define MFD_ALLOW_SEALING 0x0002U
#endif

#ifndef SYS_memfd_create
#if defined(__x86_64__)
#define SYS_memfd_create 319
#elif defined(__i386__)
#define SYS_memfd_create 356
#endif
#endif

#define errExit(msg)    do { perror(msg); exit(EXIT_FAILURE); } while (0)

int main(int argc, char *argv[])
{
    int fd;
    unsigned int seals;
    char *name, *seals_arg;
    ssize_t len;

    if (argc < 3) {
        fprintf(stderr, "%s name size [seals]\n", argv[0]);
        exit(EXIT_FAILURE);
    }

    name = argv[1];
    len = atoi(argv[2]);
    seals_arg = (argc > 3) ? argv[3] : NULL;

    /* Tạo memfd (ẩn trong RAM) */
    fd = syscall(SYS_memfd_create, name, MFD_ALLOW_SEALING);
    if (fd == -1)
        errExit("memfd_create");

    /* Resize file trong RAM */
    if (ftruncate(fd, len) == -1)
        errExit("truncate");

    printf("PID: %ld; fd: %d; /proc/%ld/fd/%d\n",
           (long) getpid(), fd, (long) getpid(), fd);

    /* Nếu có seals thì apply */
    if (seals_arg != NULL) {
        seals = 0;
        if (strchr(seals_arg, 'g')) seals |= F_SEAL_GROW;
        if (strchr(seals_arg, 's')) seals |= F_SEAL_SHRINK;
        if (strchr(seals_arg, 'w')) seals |= F_SEAL_WRITE;
        if (strchr(seals_arg, 'S')) seals |= F_SEAL_SEAL;

        if (fcntl(fd, F_ADD_SEALS, seals) == -1)
            errExit("fcntl");
    }

    pause(); /* Giữ tiến trình để file còn tồn tại */

    return 0;
}
